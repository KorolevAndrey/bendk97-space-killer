// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties['storeFile'] = 'fake'
}

apply plugin: "com.android.application"
//noinspection GroovyMissingReturnStatement
android {
    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
        density {
            // This property is set to true by default.
            enableSplit = false
        }
        abi {
            // This property is set to true by default.
            enableSplit = true
        }
    }
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    //noinspection GroovyMissingReturnStatement
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    //noinspection GroovyMissingReturnStatement
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        applicationId project.property('space.killer.app.id')
        minSdkVersion 14
        targetSdkVersion 28
        versionCode project.property('space.killer.version.code') as Integer
        versionName project.property('space.killer.version')
        resConfigs "xhdpi"
    }
    signingConfigs {
        releaseSigned {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            if (file(keystoreProperties['storeFile']).exists()) {
                storeFile file(keystoreProperties['storeFile'])
            }
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        //noinspection GroovyMissingReturnStatement
        debug {
            applicationIdSuffix ".debug"
            buildConfigField "boolean", "SPLASH_SCREEN_SKIP", project.property('space.killer.splash.screen.skip') as String
            buildConfigField "boolean", "GOOGLE_PLAY_SKIP", project.property('space.killer.debug.mode.when.debug.build') as String
            buildConfigField "boolean", "DEBUG_GAME", project.property('space.killer.debug.mode.when.debug.build') as String
        }
        release {
            buildConfigField "boolean", "SPLASH_SCREEN_SKIP", "false"
            buildConfigField "boolean", "GOOGLE_PLAY_SKIP", "false"
            buildConfigField "boolean", "DEBUG_GAME", "false"
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro', getDefaultProguardFile('proguard-android-optimize.txt')

        }
    }
    flavorDimensions "prod"
    productFlavors {
        unsigned {
            dimension "prod"
            applicationIdSuffix ".unsigned"
        }
        signed {
            dimension "prod"
            signingConfig signingConfigs.releaseSigned
        }
    }
}
/*
 * Developed by Benjamin LefÃ¨vre
 * Last modified 29/09/18 22:22
 * Copyright (c) 2018. All rights reserved.
 */

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.bendk97/AndroidLauncher'
}